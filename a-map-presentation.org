* The Life of a Clojure Expression

  A Quick Tour of Clojure Internals

  John Hume,
  @duelinmarkers,
  http://duelinmarkers.com










--------------------------------------->:[---:(--:|--:) <- ideal bottom-right of 1st slide in org-present mode.

* Disclaimers

  I'm no expert.

  All internals are subject to change.

  Code excerpts have been mangled for
  readability,
  presentation focus,
  and to fit this screen.

* The Life of What Clojure Expression?

#+begin_src clojure
  (defn m [v]
    {:foo "bar" :baz v})
    ^____ this one ___^

#+end_src

* So really,
* The Life of a Certain Map-Literal Expression
  in the body of a simple fn
  plus some discussion of minor variations:
#+begin_src clojure
  ;; a constant
  {:foo "bar" :baz 23}

  ;; w/ runtime-calculated k
  {v "bar" :baz 23}

  ;; w/ (> (count kvs) 8)
  {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7 :h 8 :i v}
#+end_src

* High-level: the "RE" in "REPL"

  - clojure.core/read, LispReader.read
  - clojure.core/eval, Compiler.eval
    - Compiler.analyze
    - Compiler$Expr.emit
  - Runtime!

* Read - clojure.core/read
#+begin_src clojure
  ;; clojure/core.clj
  (defn read
    ,,,
    ([stream ,,,]
     (clojure.lang.LispReader/read stream
                                   ,,,)))
#+end_src

* Read - LispReader
#+begin_src java
// clojure/lang/LispReader.java
static IFn[] macros = new IFn[256];
static {
  macros['{'] = new MapReader();
  ,,,
}
,,,
static class MapReader extends AFn {
  public Object invoke(Object reader, Object _) {
    PushbackReader r = (PushbackReader) reader;
    Object[] a = readDelimitedList('}', ,,,);
    if((a.length & 1) == 1)
      throw Util.runtimeException("Odd # of forms!");
    return RT.map(a);
  }
}
#+end_src

* Read - RT
#+begin_src java
// clojure/lang/RT.java
static public IPersistentMap map(Object... init){
  if(init == null)
    return PersistentArrayMap.EMPTY;
  else if(init.length <= 16)
    return PersistentArrayMap.createWithCheck(init);
  return PersistentHashMap.createWithCheck(init);
}
#+end_src

* Read
#+begin_src java
// clojure/lang/PersistentArrayMap.java
static PersistentArrayMap createWithCheck(Object[] init){
 for(int i=0; i < init.length; i += 2) {
  for(int j=i+2; j < init.length; j += 2) {
   if(equalKey(init[i], init[j]))
    throw new IllegalArgumentException(
          "Duplicate key:" + init[i]);
  }
 }
 return new PersistentArrayMap(init);
}
#+end_src

* Read
#+begin_src java
  public PersistentArrayMap(Object[] init){
    this.array = init;
    this._meta = null;
  }
#+end_src

* Read is now done

We now have the equivalent of
#+begin_src clojure
  '(defn m [v] {:foo "bar" :baz v})
#+end_src

* Analyze + Eval
#+begin_src clojure
  ;; clojure/core.clj
  (defn eval [form]
    (clojure.lang.Compiler/eval form))
#+end_src

* Analyze + Eval: pseudo-code

Before we look at the real thing:
#+begin_src java
  Object eval(form) {
    form = macroexpand(form)
    Expr expr = analyze(form)
    return expr.eval()
  }
#+end_src

* Analyze + Eval: Compiler$Expr

What's an Expr?
#+begin_src java
interface Expr {
 Object eval();
 void emit(C ctx, ObjExpr objx, GeneratorAdapter gen);
 boolean hasJavaClass();
 Class getJavaClass();
 // Often:
 //  static Expr parse(C ctx, CORRECT_TYPE form);
 // For most special forms, there an IParser:
 //  interface IParser{
 //    Expr parse(C ctx, Object form) ;
 //  }
}
#+end_src

* Analyze + Eval: "real" eval
#+begin_src java
// clojure/lang/Compiler.java
public static Object eval(Object form, boolean fresh) {
  ,,,
  form = macroexpand(form);
  if(/* form is a (do ...) */ form instanceof ISeq && Util.equals(RT.first(form), DO))
  { /* eval each form, returning the last. */ }
  else if(/* form is some non-def bit of code */ (form instanceof IType) || (form instanceof IPersistentCollection && !(RT.first(form) instanceof Symbol && ((Symbol) RT.first(form)).name.startsWith("def"))))
  {
   /* wrap it in a 0-arity fn and invoke */
   ObjExpr fexpr = (ObjExpr) analyze(C.EXPRESSION,
     RT.list(FN, PersistentVector.EMPTY, form), "eval" + RT.nextID());
   IFn fn = (IFn) fexpr.eval();
   return fn.invoke();
  } else {
   Expr expr = analyze(C.EVAL, form);
   return expr.eval();
  }
}
#+end_src

* Analyze + Eval: Sidebar

  eval's macroexpand will turn our
#+begin_src clojure
  (defn m [v] {:foo "bar" :baz v})
#+end_src
  into (more or less)
#+begin_src clojure
  (def m (fn [v] {:foo "bar" :baz v}))
#+end_src

* Analyze + Eval: analyze
#+begin_src java
static Expr analyze(C ctx, Object form, String name) {
 Class fclass = form.getClass();
 if(fclass == Symbol.class)
   return analyzeSymbol((Symbol) form);
 else if(fclass == Keyword.class)
   return registerKeyword((Keyword) form);
 /* etc, etc */
 else if(form instanceof ISeq)
  return analyzeSeq(ctx, (ISeq) form, name);
 else if(form instanceof IPersistentMap)
  return MapExpr.parse(ctx, (IPersistentMap) form);
}
#+end_src

* Analyze + Eval: analyzeSeq
#+begin_src java
static Expr analyzeSeq(C ctx, ISeq form, String name) {
  Object op = RT.first(form);
  /* elided nil-check, inline */
  if(op.equals(FN))
    return FnExpr.parse(ctx, form, name); // our fn
  IParser p;
  else if((p = (IParser) specials.valAt(op)) != null)
    return p.parse(ctx, form); // our def
  else
    return InvokeExpr.parse(ctx, form);
}
#+end_src

* Analyze + Eval: Hand-Waving

Eval of DefExpr evals its init expression.
Eval of FnExpr compiles the fn-body,
each Expr of which gets analyzed
and emitted.

Trust me.

* Analyze + Eval: MapExpr.parse
#+begin_src java
public static class MapExpr implements Expr{
 public final IPersistentVector keyvals;
 // ...
 static public Expr parse(C ctx, IPersistentMap form) {
  IPersistentVector keyvals = PersistentVector.EMPTY;
  for(ISeq s = RT.seq(form); s != null; s = s.next()) {
   IMapEntry e = (IMapEntry) s.first();
   Expr k = analyze(ctx, e.key());
   Expr v = analyze(ctx, e.val());
   keyvals = (IPersistentVector) keyvals.cons(k);
   keyvals = (IPersistentVector) keyvals.cons(v);
   // elided constantness, k uniqueness checks
  }
  Expr ret = new MapExpr(keyvals);
  // elided special cases:
  // metadata, non-unique keys, all constants
  return ret;
 }
}
#+end_src

* Analyze + Eval

We now have a MapExpr with a vector of keyvals,
types: KeywordExpr,
       StringExpr,
       KeywordExpr,
       LocalBindingExpr.

FnExpr#eval calls our MapExpr#emit.

* Analyze + Eval: MapExpr.emit
#+begin_src java
public static class MapExpr implements Expr{
 public final IPersistentVector keyvals;
 static Method mapMethod = Method.getMethod(
   "clojure.lang.IPersistentMap map(Object[])");
 static Method mapUniqueKeysMethod = Method.getMethod(
   "clojure.lang.IPersistentMap mapUniqueKeys(Object[])");

 public void emit(C ctx, ObjExpr objx, GeneratorAdapter gen){
  // elided: iterate through keyvals to determine:
  boolean allKeysConstant = /* is every k instanceof LiteralExpr? */;
  boolean allConstantKeysUnique = /* no two literal k.eval() results equal */;
  // ...
  MethodExpr.emitArgsAsArray(keyvals, objx, gen);
  if((allKeysConstant && allConstantKeysUnique)
     || (keyvals.count() <= 2))
   gen.invokeStatic(RT_TYPE, mapUniqueKeysMethod);
  else
   gen.invokeStatic(RT_TYPE, mapMethod);
  if(ctx == C.STATEMENT) gen.pop();
 }
}
#+end_src

* Analyze + Eval: Our fn is compiled!

We now have the equivalent of this Java class:
#+begin_src java
public final class a_map$m
             extends clojure.lang.AFunction {
  public static final clojure.lang.Keyword FOO =
    RT.keyword(null, "foo");
  public static final clojure.lang.Keyword BAZ =
    RT.keyword(null, "baz");

  @Override
  public Object invoke(Object arg) {
    return RT.mapUniqueKeys(
      new Object[] {FOO, "bar", BAZ, arg});
  }
}
#+end_src

* Runtime - call site

Some clj fn has this:
#+begin_src clojure
  (m "my val")
#+end_src
That's equivalent to (Java)
#+begin_src java
  M_VAR               // static const in caller's class
    .getRawRoot()     // reads a volatile
    .invoke("my val") // invokeinterface
#+end_src

* Runtime - mapUniqueKeys
#+begin_src java
  // clojure/lang/RT.java
  static public IPersistentMap mapUniqueKeys(Object... init){
    if(init == null)
      return PersistentArrayMap.EMPTY;
    else if(init.length <= 16)
      return new PersistentArrayMap(init);
    return PersistentHashMap.create(init);
  }
#+end_src

* That's It

  Questions?

* Tangents

  - If you want to mess with this sort of stuff,
    consider clojure.tools.reader
         and clojure.tools.analyzer.

  - clojure.tools.analyzer isn't as useful as I thought
    it would be for looking at the result of compiling
    literal expressions. (Doesn't show implementation
    details of literals.)

  - There's no supported API for creating small maps
    with compile-time constant keys as efficiently as
    the literal syntax.
    (c.c/array-map uses createAsIfByAssoc.)

  - A PersistentArrayMap will upgrade itself to a
    PersistentHashMap as new keys are assoc'd in, but
    a PersistentHashMap will never downgrade itself.
