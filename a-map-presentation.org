* The Life of a Clojure Expression

  John Hume
  @duelinmarkers

* The Life of What Clojure Expression?

#+begin_src clojure
  (defn m [v] {:foo "bar" :baz v})
  ;           ^---- this one ---^
#+end_src

* So really,
* The Life of a Certain Map-Literal Expression

  With some discussion of variations, like
#+begin_src clojure
  {:foo "bar" :baz 23} ; compile-time constant

  {:a 1 :b 2 :c 3 :d 4 :e 5 :f 6 :g 7
   :h 8 :i v} ; many kvs
#+end_src

* High-level

  - read
  - compile
  - run

* Read

#+begin_src java
  // LispReader.java
  static {
    ...
    macros['{'] = new MapReader();
    ...
  }
  ...
  public static class MapReader extends AFn {
    public Object invoke(Object reader, Object leftparen) {
      PushbackReader r = (PushbackReader) reader;
      Object[] a = readDelimitedList('}', r, true).toArray();
      if((a.length & 1) == 1)
        throw Util.runtimeException("Map literal must contain an even number of forms");
      return RT.map(a);
    }
  }
  // RT.java
  static public IPersistentMap map(Object... init){
    if(init == null)
      return PersistentArrayMap.EMPTY;
    else if(init.length <= PersistentArrayMap.HASHTABLE_THRESHOLD)
      return PersistentArrayMap.createWithCheck(init);
    return PersistentHashMap.createWithCheck(init);
  }
  // PersistentArrayMap.java
  static public PersistentArrayMap createWithCheck(Object[] init){
    for(int i=0; i < init.length; i += 2) {
      for(int j=i+2; j < init.length; j += 2) {
        if(equalKey(init[i], init[j]))
          throw new IllegalArgumentException("Duplicate key: " + init[i]);
        }
    return new PersistentArrayMap(init);
  }
#+end_src
